|-------------------------------|
| PhotoLab v1 (Assignment 2)	|
|				|
| EECS 22 Fall 2018		|
| Jigar Hira			|
| 92549698			|
| hiraj@uci.edu			|
|-------------------------------|

The PhotoLab program loads, manipulates, and saves .ppm image files. Through the menu, the user can load an image and then apply black and white, edge detection, and shuffle manuipulations. The menu was created in a loop, so after every selection, the user is returned to the menu (unless if the user selects exit). Image loading and saving files were provided, but all image manipulation implimentation is original.

Black and White:

The black and white feature takes the average of the R, G, and B color values for each pixel and sets all three colors to this value. This creates a greyscale effect where all color channels are the same value for any given pixel. 


Edge Detection:

The edge detection checks neighboring pixels to determine if the differential is enough to constitute an edge. The edge detection function uses three temporary integer arrays to store the values of the new R,G, and B channels. The algorithim first sets all edge pixels to (0,0,0) or black, and then proceeds to the interior pixels. For every interior pixel, the same operation is performed for each color channel. The original value is multiplied by 8, and then the value of every surrounding pixel is subtracted from this to get the final value. In order to iterate through the neighboring pixels, I used two nested for loops to cycle through the index of the pixel +/- 1 in every direction. After the manipulation for a pixel is complete, it is saved to the temporary arrays, and once all manipulation is complete, the original array is updated.


Shuffle:

The shuffle feature breaks the image into 16 pieces and shuffles the location of the pieces around the image. My function first starts with a one dimensional array containing the values 0 to 15. This is then shuffled by swapping any element in the array with the last index in the array. The max index is then decremented and the process continues until all values have been swapped. This swapped array then dictates the order of the shuffled pieces. The part of the image originally in location (2) of the image will then be moved to location shuffled_array[2]. This is achieved by using nested for loops that iterate through all 16 pieces and then all the pixels in each piece. Each pixel is mapped to its new location using some simple index arithmetic and the new pixel data is saved to a temperary array. Once all pixels have been iterated through, the original R, G, and B arrays are updated.
